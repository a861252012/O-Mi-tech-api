<?php

namespace App\Services\Auth;

use App\Services\RedisCacheService;
use App\Traits\GuardExtend;
use Illuminate\Auth\GuardHelpers;
use Illuminate\Auth\SessionGuard as Guard;
use Illuminate\Contracts\Auth\Authenticatable;
use Illuminate\Support\Facades\Redis;
use Illuminate\Support\Facades\Session;

/**
 * Created by PhpStorm.
 * User: nicholas
 * Date: 2016/9/22
 * Time: 9:44
 */
class SessionGuard extends Guard
{
    use GuardHelpers, GuardExtend;
    const guard = 'pc';

    protected $_config;
    protected $request;

    const CLIENT_ENCRY_FIELD = 'v_remember_encrypt';
    const SEVER_SESS_ID = 'webonline';//在线用户id
    const  TOKEN_CONST = 'auth_key';
    const  WEB_SECRET_KEY = 'c5ff645187eb7245d43178f20607920e456';

    /**
     * Log a user into the application.
     *
     * @param  \Illuminate\Contracts\Auth\Authenticatable $user
     * @param  bool $remember
     * @return void
     */
    public function login(Authenticatable $user, $remember = false)
    {
        /**
         * 7 天免登陆
         */
        if ($remember){
            //记住我的功能，
            config()->set('session.lifetime', 7 * 24 * 60);
//            Session::save();
        }
        $this->updateSession($user->getAuthIdentifier());

        /**
         * 清除计数 当用户输入正确的登录信息之后要清除掉原来输入错误的次数
         */

        $this->fireLoginEvent($user, $remember);

        $this->setUser($user);
    }

    public function id()
    {
        if ($user = $this->user()) {
            return $user->getAuthIdentifier();
        }
    }

    public function user()
    {
        $user = parent::user(); // TODO: Change the autogenerated stub
        if($user && $this->checkRepeatLogin($user->getAuthIdentifier(), Session::getId())){
            $user = null;
        };
        return $user; // TODO: Change the autogenerated stub
    }

    public function logout()
    {
        resolve(RedisCacheService::class)->delSid($this->id());
        parent::logout();
    }

    /**
     * @param $id
     */
    protected function updateSession($id)
    {
        $this->session->put($this->getName(), $id);
        $this->session->migrate(true);

        $this->session->put(self::SEVER_SESS_ID, $id);

        $sid = $this->session->getId();
        resolve(RedisCacheService::class)->setSidForPC($id, $sid);
        $this->updateSid($id, $sid);
    }

    public function extendSession()
    {
        $id = $this->id();
        if ($id) {
            resolve(RedisCacheService::class)->resetTTLForPC($id);
        }
    }

    public function getName()
    {
        return self::SEVER_SESS_ID;
    }
}